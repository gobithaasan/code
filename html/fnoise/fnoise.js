// Generated by CoffeeScript 1.9.1
(function() {
  var IO, Viewer, cb, err, fragmentShader, gui, vertexShader, viewer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PhiloGL.unpack();

  Viewer = (function() {
    var aspect, canvas, center, dragCurrent, dragStart, frameIndex, frameLast, frameTimes, mouseDragging, p;

    canvas = document.getElementById('fnCanvas');

    canvas.width = window.innerWidth;

    canvas.height = window.innerHeight - 5;

    aspect = canvas.width / canvas.height;

    frameTimes = [0, 0, 0, 0, 0];

    frameLast = 0;

    frameIndex = 0;

    p = Date.now() / 1000000000;

    Viewer.prototype.turbulence = 0.03;

    Viewer.prototype.tfrequency = 0.5;

    Viewer.prototype.persistence = 2.0;

    Viewer.prototype.lacunarity = 2.0;

    Viewer.prototype.speed = 1.0;

    Viewer.prototype.flip = false;

    Viewer.prototype.hint = 'click and drag to move';

    center = {
      x: 0.0,
      y: 0.0
    };

    mouseDragging = false;

    dragStart = {
      x: 0,
      y: 0
    };

    dragCurrent = {
      x: 0,
      y: 0
    };

    function Viewer() {
      this.load = bind(this.load, this);
    }

    if (PhiloGL.hasWebGL() === !true) {
      alert("Your browser does not support WebGL");
    }

    Viewer.prototype.load = function() {
      var getMousePos;
      PhiloGL('fnCanvas', {
        program: [
          {
            id: 'fnoise',
            from: 'uris',
            path: './',
            vs: 'vertex.glsl',
            fs: 'fragment.glsl'
          }
        ],
        onError: (function(_this) {
          return function(e) {
            return console.log(e);
          };
        })(this),
        onLoad: (function(_this) {
          return function(app) {
            var draw, time;
            time = Date.now();
            draw = function() {
              p += _this.speed * 0.0002;
              Media.Image.postProcess({
                width: canvas.width,
                height: canvas.height,
                toScreen: true,
                aspectRatio: 1,
                program: 'fnoise',
                uniforms: {
                  p: p,
                  aspect: aspect,
                  turbulence: _this.turbulence,
                  tfrequency: _this.tfrequency,
                  persistence: _this.persistence,
                  lacunarity: _this.lacunarity,
                  dX: aspect * (center.x + dragStart.x - dragCurrent.x) / canvas.width,
                  dY: (center.y + dragCurrent.y - dragStart.y) / canvas.height,
                  flip: _this.flip
                }
              });
              return Fx.requestAnimationFrame(draw);
            };
            return draw();
          };
        })(this)
      });
      getMousePos = (function(_this) {
        return function(event) {
          var rect;
          rect = canvas.getBoundingClientRect();
          return {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
          };
        };
      })(this);
      canvas.addEventListener("mousedown", (function(_this) {
        return function(e) {
          dragStart = dragCurrent = getMousePos(e);
          return mouseDragging = true;
        };
      })(this));
      canvas.addEventListener("mousemove", (function(_this) {
        return function(e) {
          if (mouseDragging) {
            return dragCurrent = getMousePos(e);
          }
        };
      })(this));
      return canvas.addEventListener("mouseup", (function(_this) {
        return function(e) {
          mouseDragging = false;
          center.x = center.x + dragStart.x - dragCurrent.x;
          center.y = center.y + dragCurrent.y - dragStart.y;
          return dragStart = dragCurrent = {
            x: 0.0,
            y: 0.0
          };
        };
      })(this));
    };

    return Viewer;

  })();

  viewer = new Viewer();

  viewer.load();

  gui = new dat.GUI({
    autoPlace: false
  });

  document.getElementById('container').appendChild(gui.domElement);

  gui.add(viewer, 'turbulence', 0.0, 0.2);

  gui.add(viewer, 'tfrequency', 0.0, 1.0);

  gui.add(viewer, 'persistence', 1.0, 5.0);

  gui.add(viewer, 'lacunarity', 0.0, 5.0);

  gui.add(viewer, 'speed').min(0);

  gui.add(viewer, 'flip');

  gui.close();

  gui.width = 300;

  console.log(gui);

  IO = (function() {
    function IO() {}

    return IO;

  })();

  IO.prototype.load = function(url, store, cb, cbErr) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', url, true);
    req.onreadystatechange = function() {
      if (req.readyState === 4) {
        if (req.status === 200) {
          return cb(store, req.responseText);
        } else {
          return cbErr(url);
        }
      }
    };
    return req.send(null);
  };

  cb = function(sh, txt) {
    sh.text(txt);
    return console.log(sh);
  };

  err = function(url) {
    return alert("failed to load " + url);
  };

  vertexShader = {
    text: null
  };

  fragmentShader = {
    text: null
  };

}).call(this);

//# sourceMappingURL=fnoise.js.map
